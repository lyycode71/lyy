class Solution { 
 public int findCircleNum(int[][] M) { 
 // 矩阵的行和列下标相当于人的编号，元素相当于两人是否为朋友关系 
  UnionFindSet ufs = new UnionFindSet(M.length); 
  for(int i = 0; i < M.length; ++i) { 
   for(int j = 0; j < M[i].length; ++j) {
   // 自己和自己的关系除外 
    if(i == j) 
     continue; 
    // 如果i和j是朋友，将其添加到一个朋友圈
   if(1 == M[i][j]) 
    ufs.union(i, j); 
   }
  }
  return ufs.count();
 }
}
public class UnionFindSet { 
 private List<Integer> ufs; 
 public UnionFindSet(int size){
  ufs = new ArrayList<>(size); 
 }
 public int findRoot(int index) {
  while(ufs.get(index) >= 0) {
   index = ufs.get(index); 
  }
  return index; 
 }
 boolean union(int x1, int x2) {
  int root1 = findRoot(x1); 
  int root2 = findRoot(x2); 
  if(root1 == root2) 
   return false;
  ufs.set(root1, ufs.get(root2));
  ufs.set(root2, root1);
  return true;
  }
  int count() {
   int count = 0;
   for(int e : ufs) {
    if(e < 0) ++count; 
   }
   return count;
  }
 }
