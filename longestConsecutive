public int longestConsecutive(int[] arr){
 if(arr==null||arr.length()==0){
  return 0;
 }
 int max=1;
 HashMap<Integer,Integer> map=new HashMap<>();
 for(int i=0;i<arr.length();i++){
  if(!map.containsKey(arr[i])){
   map.put(arr[i],1);
   if(map.containsKey(arr[i]-1)){
    max=Math.max(max,merge(map,arr[i]-1,arr[i]);
   }
   if(map.containsKey(arr[i]+1)){
    max=Math.max(max,merge(map,arr[i],arr[i]+1);
   }
  }
 }
 return max;
}
public int merge(HashMap<Integer,Integer> map,int s,int m){
 int left=s-map.get(s)+1;//左边界
 inr right=m-map.get(m)+1;//有边界
 int len=right-left+1;//连续长度
 map.put(left,len);//记录连续长度
 map.put(right,len);//记录连续长度
 return len;
}
