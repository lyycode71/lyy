import java.util.*;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    public ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
        ArrayList<ArrayList<Integer>> res=new ArrayList<>();
        if(pRoot==null){
            return res;
        }
        Stack<TreeNode> st1=new Stack<>();
        Stack<TreeNode> st2=new Stack<>();
        //实现轮流存储树层结点
        st1.push(pRoot);
        
        while(!st1.empty()||!st2.empty()){
            boolean k=false;
            int n=st1.size();
            if(st1.empty()){
                n=st2.size();
                k=true;
            }
            ArrayList<Integer> li=new ArrayList<>();
            for(int i=0;i<n;i++){
                if(k){//处理偶数层
                    TreeNode cur=st2.pop();
                    li.add(cur.val);
                    //左右结点进栈也需要注意颠倒，因为栈后进先出
                    if(cur.right!=null){
                        st1.push(cur.right);
                    }
                    if(cur.left!=null){
                        st1.push(cur.left);
                    }
                    
                }else{//处理奇数层
                    TreeNode cur=st1.pop();
                    li.add(cur.val);
                    if(cur.left!=null){
                        st2.push(cur.left);
                    }
                    if(cur.right!=null){
                        st2.push(cur.right);
                    }
                }
            }
            res.add(li);
        }
        return res;
    }
}
