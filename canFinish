class Solution {
    List<List<Integer>> ma;
    int[] va;
    boolean res=true;;
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ma=new ArrayList<>();
        va=new int[numCourses];
        for(int i=0;i<numCourses;i++){
            ma.add(new ArrayList<Integer>());
        }
        for(int[] pr:prerequisites){
            ma.get(pr[1]).add(pr[0]);
        }
        for(int i=0;i<numCourses;i++){
            if(va[i]==0){
                dfs(i);
            }
        }
        return res;
    }
    public void dfs(int k){
        va[k]=1;
        for(int a:ma.get(k)){
            if(va[a]==0){
                dfs(a);
                if(!res){
                    return;
                }
            }else if(va[a]==1){
                res=false;
                return;
            }
        }
        va[k]=2;
    }
}
