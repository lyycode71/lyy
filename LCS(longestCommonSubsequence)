public int[][] getdp(char[] s1,char[]s2){
 int[][] dp=new int[s1.length][s2.length];
 dp[0][0]=s1[0]==s2[0]?1:0;
 for(int i=1;i<s1.length;i++){
  dp[i][0]=Math.max(dp[i-1][0],s1[i]==s2[0]?1:0;
 }
 for(int j=1;j<s2.length;j++){
  dp[0][j]=Math.max(dp[0][j-1],s1[0]==s2[j]?1:0;
 }
 for(int i=1;i<s1.length;i++){
  for(int j=1;j<s2.length;j++){
   dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
   if(s1[i]==s2[j]){
    dp[i][j]=Math.max(dp[i][j],dp[i-1][j-1]+1);
   }
  }
 }
 returnn dp;
}
public Sring lcse(String s1,String s2){
 if(s1==null||s2==null||s1.length()==0||s2.length()==0){
  return "";
 }
 char[] c1=s1.toCharArray();
 char[] c2=s2.toCharArray();
 int[][] dp=getdp(c1,c2);
 int r=c1.length-1;
 int c=c2.length-1;
 char[] res=new char[dp[m][n]];
 int index=res.length-1;;
 while(index>=0){
  if(c>0&&dp[r][c]==dp[r][c-1]){
   c--;
  }else(r>0&&dp[r][c]==dp[r-1][c]){
   r--;
  }else{
   res[index--]=c1[r];
   r--;
   c--;
  }
 }
 return String.valueOf(res);
}
