/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        int n=lists.length;
        if(n==0){
            return null;
        }
        ListNode head=new ListNode(0);
        ListNode cur=head;
        PriorityQueue<ListNode> pq=new PriorityQueue<>(new Comparator<ListNode>(){
            @Override
            public int compare(ListNode o1,ListNode o2){
                return o1.val-o2.val;
            }
        });
        for(ListNode li:lists){
            if(li==null){
                continue;
            }
            pq.add(li);
        }
        while(!pq.isEmpty()){
            ListNode nNode=pq.poll();
            cur.next=nNode;
            cur=cur.next;
            if(nNode.next!=null){
                pq.add(nNode.next);
            }
        }
        return head.next;
    }
    
    public ListNode mergeKListsT(ListNode[] lists) {
        int n=lists.length;
        if(n==0){
            return null;
        }
        if(n==1){
            return lists[0];
        }
        if(n==2){
            return mergeKLists2(lists[0],lists[1]);
        }

        int mid=n/2;
        ListNode[] l1=new ListNode[mid];
        for(int i=0;i<mid;i++){
            l1[i]=lists[i];
        }
        ListNode[] l2=new ListNode[n-mid];
        for(int i=mid,j=0;i<n;i++,j++){
            l2[j]=lists[i];
        }
        return mergeKLists2(mergeKListsT(l1),mergeKListsT(l2));//实现归并
    }
    public static ListNode mergeKLists2(ListNode l1,ListNode l2){
        if(l1==null) return l2;
        if(l2==null) return l1;
        ListNode head=null;
        if(l1.val<l2.val){
            head=l1;
            head.next=mergeKLists2(l1.next,l2);
        }else{
            head=l2;
            head.next=mergeKLists2(l1,l2.next);
        }
        return head;
    }
}
