import java.util.*;
import java.io.*;
class node{
    int val;
    int left;
    int right;
    node(int val){
        this.val=val;
        this.left=-1;
        this.right=-1;
    }
    int getLeft(){
        return left;
    }
    int getRight(){
        return right;
    }
    int getVal(){
        return val;
    }
}
public class Main{
    private static int N=10001;
    private static node[] nodes=new node[N];
    private static int tmp=-99999;
    private static boolean isR=true;
    public static void main(String[] args){
        Scanner scanner=new Scanner(System.in);
        String[] str=scanner.nextLine().split(",");
        if(str[0].equals("None")||str.length==0){
            System.out.println("True");
            return;
        }
        
        builtTree(str);
        mid(nodes[1]);
        if(isR){
            System.out.println("True");
        }else{
            System.out.println("False");
        }
    }
    public static void builtTree(String[] str){
        int id=0;
        for(int i=1;i<=str.length;i++){
            if(!"None".equals(str[i-1])){
                id++;
                nodes[i]=new node(Integer.parseInt(str[i-1]));
            }
        }
        int p=1;
        while(p*2<id){
            nodes[p].left=p*2;
            nodes[p].right=p*2+1;
            p++;
        }
    }
    public static void mid(node root){
        if(root.getLeft()!=-1){
            mid(nodes[root.getLeft()]);
        }
        int val=root.getVal();
        if(tmp<=val){
            tmp=val;
        }else{
            isR=false;
        }
        if(root.getRight()!=-1){
            mid(nodes[root.getRight()]);
        }
    }
}
