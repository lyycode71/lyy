class Solution {
    public int openLock(String[] deadends, String target) {
        int n=deadends.length;
        int res=0;
        Set<String> dead=new HashSet<>();
        for(int i=0;i<n;i++){
            dead.add(deadends[i]);
        }
        if(dead.contains("0000")){
            return -1;
        }
        Queue<String> qu=new LinkedList<>();
        qu.add("0000");
        Set<String> book=new HashSet<>();
        book.add("0000");
        while(!qu.isEmpty()){
            int m=qu.size();
            for(int j=0;j<m;j++){
                String cur=qu.poll();
                if(dead.contains(cur)){
                    continue;
                }
                if(cur.equals(target)){
                    return res;
                }
            
                char[] a1=cur.toCharArray();
                char[] a2=cur.toCharArray();
                for(int i=0;i<4;i++){
                
                    a1[i]=a1[i]=='9'?'0':(char)(a1[i]+1);
                    String ns1=new String(a1);
                    if(!book.contains(ns1)){
                        qu.add(ns1);
                        book.add(ns1);
                    }
                    a1[i]=cur.charAt(i);
                    a2[i]=a2[i]=='0'?'9':(char)(a2[i]-1);
                    String ns2=new String(a2);
                    if(!book.contains(ns2)){
                        qu.add(ns2);
                        book.add(ns2);
                    }
                    a2[i]=a1[i];
                }
            }
            res++;
        }
        return -1;
    }
}
