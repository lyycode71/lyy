class Solution {
    List<List<Integer>> result = new LinkedList<>();
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        if(candidates.length == 0){
            return result;
        }
        Arrays.sort(candidates);
        find2(candidates,target,0,new LinkedList<Integer>());
        return result;

    }
    public void find2(int[] candidates, int target, int index, LinkedList<Integer> trace){
   
        if(target == 0){
            result.add(new LinkedList(trace));
            return ;
        }
        if(target > 0){
            
            for(int i = index; i<candidates.length; i++){
                
                if(i > index && candidates[i] == candidates[i - 1]) continue;
                //做出选择
                trace.add(candidates[i]);
                comSum2(candidates,target - candidates[i],i+1,trace);
                //撤回选择
                trace.removeLast();
            }
        }
    }
}
