class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res=new ArrayList<>();
        back(res,new StringBuilder(),0,0,n);
        return res;
    }
    public static void back(List<String> res,StringBuilder cur,int n1,int n2,int n){
    //回溯法实现
        if(cur.length()==n*2){
            res.add(cur.toString());
            return;
        } 
        if(n1<n) {
        
            cur.append("(");
            back(res,cur,n1+1,n2,n);
            cur.deleteCharAt(cur.length()-1);
            //删除最后的一位
        }
        if(n2<n1){
            cur.append(")");

            back(res,cur,n1,n2+1,n);
            cur.deleteCharAt(cur.length()-1);

        }
    }
}
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<String>();
        generate(res, "", 0, 0, n);
        
        return res;
    }
        //count1统计“(”的个数，count2统计“)”的个数
    public void generate(List<String> res , String ans, int count1, int count2, int n){
        
        if(count1 > n || count2 > n) return;
        
        if(count1 == n && count2 == n)  res.add(ans);
 
        
        if(count1 >= count2){
            String ans1 = new String(ans);
            generate(res, ans+"(", count1+1, count2, n);
            generate(res, ans1+")", count1, count2+1, n);
            
        }
    }

}

class Solution2{
    public Liat<string> generateParenthesis(int n) {
        vector<string> res;
        back(res, "", 0, 0, n);
        return res;
    }
    public static void back(List<string> res, string s, int l, int r, int n){
        if(l > n || r > n || r > l) return ;
        if(l == n && r == n) {
             res.add(s);
             return;
        }
        back(res, s + '(', l+1, r, n);
        back(res, s + ')', l, r+1, n);
        return;
    }
}
