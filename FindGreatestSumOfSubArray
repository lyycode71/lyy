import java.util.*;
public class Solution {
    public int FindGreatestSumOfSubArray(int[] array) {
        int max=array[0],k=array[0];
        int n=array.length;
        for(int i=1;i<n;i++){
            k=Math.max(k+array[i],array[i]);
            if(k>max){
                max=k;
            }
        }
        return max;
    }
    
    public int uniquePaths(int m, int n) {
        List<List<Integer>> pathNum = new ArrayList<>();
        // 申请F(i,j)空间，初始化
        for(int i = 0; i < m; ++i){
            pathNum.add(new ArrayList<>());
            pathNum.get(i).add(1);
       }
        for(int i = 1; i < n; ++i){
            pathNum.get(0).add(1);
        }
        for(int i = 1; i < m; ++i){
            for(int j = 1; j < n; ++j){
                // F(i,j) = F(i-1,j) + F(i,j-1)
                pathNum.get(i).add(pathNum.get(i).get(j - 1)
                + pathNum.get(i - 1).get(j));
           }
       }
        return pathNum.get(m - 1).get(n - 1);
   
    }
}
