char Iswin(char board[Row][Col], int row, int col)
{
	int i = 0, j = 0, f=0;
	for (i = 0; i < row; i++)   //行相等
	{
		for (j = 0; j <(col-1); j++)
		{
			if (board[i][j] == board[i][j + 1] && board[i][j + 1] == board[i][j + 2] && board[i][j] != ' ')
				return board[i][j];
		}
	}
	for (i = 0; i < col; i++)   //列相等
	{
		for (j = 0; j <(row-1); j++)
		{
			if (board[j][i] == board[j + 1][i] && board[j + 1][i] == board[j + 2][i] && board[j][i] != ' ')
				return board[j][i];
		}
	}
	for (f = 0; f < row; f++)   // “\”相等
	{
		i = f;
		for (j = 0; ((i + 2) < row) && ((j + 2) < col); i++, j++)
		{
			if (board[i][j] == board[i + 1][j + 1] && board[i + 1][j + 1] == board[i + 2][j + 2] && board[i][j] != ' ')
				return board[i][j];
		}
	}
	for (f = col; f >0; f--)   //  “/”相等
	{
		j = f-1;
		for (i = 0; ((i + 2) < row) && ((j - 2) >=0); i++, j--)
		{
			if (board[i][j] == board[i + 1][j - 1] && board[i + 1][j - 1] == board[i + 2][j - 2] && board[i][j] != ' ')
				return board[i][j];
		}
	}
		if (Isfull(board, row, col))
		{
			return 'Q';
		}
		return ' ';
}
